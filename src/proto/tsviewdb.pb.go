// Code generated by protoc-gen-go.
// source: tsviewdb.proto
// DO NOT EDIT!

package tsviewdb

import proto "github.com/golang/protobuf/tree/master/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type DataType int32

const (
	DataType_INT64   DataType = 0
	DataType_SCALED1 DataType = 1
	DataType_SCALED2 DataType = 2
	DataType_SCALED3 DataType = 3
	DataType_DOUBLE  DataType = 15
)

var DataType_name = map[int32]string{
	0:  "INT64",
	1:  "SCALED1",
	2:  "SCALED2",
	3:  "SCALED3",
	15: "DOUBLE",
}
var DataType_value = map[string]int32{
	"INT64":   0,
	"SCALED1": 1,
	"SCALED2": 2,
	"SCALED3": 3,
	"DOUBLE":  15,
}

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}
func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}
func (x DataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *DataType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DataType_value, data, "DataType")
	if err != nil {
		return err
	}
	*x = DataType(value)
	return nil
}

type Aggregation struct {
	Type             *DataType                      `protobuf:"varint,1,opt,name=type,enum=tsviewdb.DataType,def=1" json:"type,omitempty"`
	Scaled           *Aggregation_AggregationScaled `protobuf:"bytes,2,opt,name=scaled" json:"scaled,omitempty"`
	Double           *Aggregation_AggregationDouble `protobuf:"bytes,3,opt,name=double" json:"double,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *Aggregation) Reset()         { *m = Aggregation{} }
func (m *Aggregation) String() string { return proto.CompactTextString(m) }
func (*Aggregation) ProtoMessage()    {}

const Default_Aggregation_Type DataType = DataType_SCALED1

func (m *Aggregation) GetType() DataType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_Aggregation_Type
}

func (m *Aggregation) GetScaled() *Aggregation_AggregationScaled {
	if m != nil {
		return m.Scaled
	}
	return nil
}

func (m *Aggregation) GetDouble() *Aggregation_AggregationDouble {
	if m != nil {
		return m.Double
	}
	return nil
}

type Aggregation_AggregationScaled struct {
	Count            *int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	Min              *int64 `protobuf:"varint,2,opt,name=min" json:"min,omitempty"`
	Max              *int64 `protobuf:"varint,3,opt,name=max" json:"max,omitempty"`
	Mean             *int64 `protobuf:"varint,4,opt,name=mean" json:"mean,omitempty"`
	Stdev            *int64 `protobuf:"varint,5,opt,name=stdev" json:"stdev,omitempty"`
	P99              *int64 `protobuf:"varint,6,opt,name=p99" json:"p99,omitempty"`
	P95              *int64 `protobuf:"varint,7,opt,name=p95" json:"p95,omitempty"`
	P90              *int64 `protobuf:"varint,8,opt,name=p90" json:"p90,omitempty"`
	P85              *int64 `protobuf:"varint,15,opt,name=p85" json:"p85,omitempty"`
	P80              *int64 `protobuf:"varint,16,opt,name=p80" json:"p80,omitempty"`
	P75              *int64 `protobuf:"varint,9,opt,name=p75" json:"p75,omitempty"`
	P70              *int64 `protobuf:"varint,17,opt,name=p70" json:"p70,omitempty"`
	P65              *int64 `protobuf:"varint,18,opt,name=p65" json:"p65,omitempty"`
	P60              *int64 `protobuf:"varint,19,opt,name=p60" json:"p60,omitempty"`
	P55              *int64 `protobuf:"varint,20,opt,name=p55" json:"p55,omitempty"`
	P50              *int64 `protobuf:"varint,10,opt,name=p50" json:"p50,omitempty"`
	P45              *int64 `protobuf:"varint,21,opt,name=p45" json:"p45,omitempty"`
	P40              *int64 `protobuf:"varint,22,opt,name=p40" json:"p40,omitempty"`
	P35              *int64 `protobuf:"varint,23,opt,name=p35" json:"p35,omitempty"`
	P30              *int64 `protobuf:"varint,24,opt,name=p30" json:"p30,omitempty"`
	P25              *int64 `protobuf:"varint,11,opt,name=p25" json:"p25,omitempty"`
	P20              *int64 `protobuf:"varint,25,opt,name=p20" json:"p20,omitempty"`
	P15              *int64 `protobuf:"varint,26,opt,name=p15" json:"p15,omitempty"`
	P10              *int64 `protobuf:"varint,12,opt,name=p10" json:"p10,omitempty"`
	P5               *int64 `protobuf:"varint,13,opt,name=p5" json:"p5,omitempty"`
	P1               *int64 `protobuf:"varint,14,opt,name=p1" json:"p1,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Aggregation_AggregationScaled) Reset()         { *m = Aggregation_AggregationScaled{} }
func (m *Aggregation_AggregationScaled) String() string { return proto.CompactTextString(m) }
func (*Aggregation_AggregationScaled) ProtoMessage()    {}

func (m *Aggregation_AggregationScaled) GetCount() int64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetMin() int64 {
	if m != nil && m.Min != nil {
		return *m.Min
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetMax() int64 {
	if m != nil && m.Max != nil {
		return *m.Max
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetMean() int64 {
	if m != nil && m.Mean != nil {
		return *m.Mean
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetStdev() int64 {
	if m != nil && m.Stdev != nil {
		return *m.Stdev
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetP99() int64 {
	if m != nil && m.P99 != nil {
		return *m.P99
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetP95() int64 {
	if m != nil && m.P95 != nil {
		return *m.P95
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetP90() int64 {
	if m != nil && m.P90 != nil {
		return *m.P90
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetP85() int64 {
	if m != nil && m.P85 != nil {
		return *m.P85
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetP80() int64 {
	if m != nil && m.P80 != nil {
		return *m.P80
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetP75() int64 {
	if m != nil && m.P75 != nil {
		return *m.P75
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetP70() int64 {
	if m != nil && m.P70 != nil {
		return *m.P70
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetP65() int64 {
	if m != nil && m.P65 != nil {
		return *m.P65
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetP60() int64 {
	if m != nil && m.P60 != nil {
		return *m.P60
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetP55() int64 {
	if m != nil && m.P55 != nil {
		return *m.P55
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetP50() int64 {
	if m != nil && m.P50 != nil {
		return *m.P50
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetP45() int64 {
	if m != nil && m.P45 != nil {
		return *m.P45
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetP40() int64 {
	if m != nil && m.P40 != nil {
		return *m.P40
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetP35() int64 {
	if m != nil && m.P35 != nil {
		return *m.P35
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetP30() int64 {
	if m != nil && m.P30 != nil {
		return *m.P30
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetP25() int64 {
	if m != nil && m.P25 != nil {
		return *m.P25
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetP20() int64 {
	if m != nil && m.P20 != nil {
		return *m.P20
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetP15() int64 {
	if m != nil && m.P15 != nil {
		return *m.P15
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetP10() int64 {
	if m != nil && m.P10 != nil {
		return *m.P10
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetP5() int64 {
	if m != nil && m.P5 != nil {
		return *m.P5
	}
	return 0
}

func (m *Aggregation_AggregationScaled) GetP1() int64 {
	if m != nil && m.P1 != nil {
		return *m.P1
	}
	return 0
}

type Aggregation_AggregationDouble struct {
	Count            *float64 `protobuf:"fixed64,1,opt,name=count" json:"count,omitempty"`
	Min              *float64 `protobuf:"fixed64,2,opt,name=min" json:"min,omitempty"`
	Max              *float64 `protobuf:"fixed64,3,opt,name=max" json:"max,omitempty"`
	Mean             *float64 `protobuf:"fixed64,4,opt,name=mean" json:"mean,omitempty"`
	Stdev            *float64 `protobuf:"fixed64,5,opt,name=stdev" json:"stdev,omitempty"`
	P99              *float64 `protobuf:"fixed64,6,opt,name=p99" json:"p99,omitempty"`
	P95              *float64 `protobuf:"fixed64,7,opt,name=p95" json:"p95,omitempty"`
	P90              *float64 `protobuf:"fixed64,8,opt,name=p90" json:"p90,omitempty"`
	P85              *float64 `protobuf:"fixed64,15,opt,name=p85" json:"p85,omitempty"`
	P80              *float64 `protobuf:"fixed64,16,opt,name=p80" json:"p80,omitempty"`
	P75              *float64 `protobuf:"fixed64,9,opt,name=p75" json:"p75,omitempty"`
	P70              *float64 `protobuf:"fixed64,17,opt,name=p70" json:"p70,omitempty"`
	P65              *float64 `protobuf:"fixed64,18,opt,name=p65" json:"p65,omitempty"`
	P60              *float64 `protobuf:"fixed64,19,opt,name=p60" json:"p60,omitempty"`
	P55              *float64 `protobuf:"fixed64,20,opt,name=p55" json:"p55,omitempty"`
	P50              *float64 `protobuf:"fixed64,10,opt,name=p50" json:"p50,omitempty"`
	P45              *float64 `protobuf:"fixed64,21,opt,name=p45" json:"p45,omitempty"`
	P40              *float64 `protobuf:"fixed64,22,opt,name=p40" json:"p40,omitempty"`
	P35              *float64 `protobuf:"fixed64,23,opt,name=p35" json:"p35,omitempty"`
	P30              *float64 `protobuf:"fixed64,24,opt,name=p30" json:"p30,omitempty"`
	P25              *float64 `protobuf:"fixed64,11,opt,name=p25" json:"p25,omitempty"`
	P20              *float64 `protobuf:"fixed64,25,opt,name=p20" json:"p20,omitempty"`
	P15              *float64 `protobuf:"fixed64,26,opt,name=p15" json:"p15,omitempty"`
	P10              *float64 `protobuf:"fixed64,12,opt,name=p10" json:"p10,omitempty"`
	P5               *float64 `protobuf:"fixed64,13,opt,name=p5" json:"p5,omitempty"`
	P1               *float64 `protobuf:"fixed64,14,opt,name=p1" json:"p1,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Aggregation_AggregationDouble) Reset()         { *m = Aggregation_AggregationDouble{} }
func (m *Aggregation_AggregationDouble) String() string { return proto.CompactTextString(m) }
func (*Aggregation_AggregationDouble) ProtoMessage()    {}

func (m *Aggregation_AggregationDouble) GetCount() float64 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetMin() float64 {
	if m != nil && m.Min != nil {
		return *m.Min
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetMax() float64 {
	if m != nil && m.Max != nil {
		return *m.Max
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetMean() float64 {
	if m != nil && m.Mean != nil {
		return *m.Mean
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetStdev() float64 {
	if m != nil && m.Stdev != nil {
		return *m.Stdev
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetP99() float64 {
	if m != nil && m.P99 != nil {
		return *m.P99
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetP95() float64 {
	if m != nil && m.P95 != nil {
		return *m.P95
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetP90() float64 {
	if m != nil && m.P90 != nil {
		return *m.P90
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetP85() float64 {
	if m != nil && m.P85 != nil {
		return *m.P85
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetP80() float64 {
	if m != nil && m.P80 != nil {
		return *m.P80
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetP75() float64 {
	if m != nil && m.P75 != nil {
		return *m.P75
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetP70() float64 {
	if m != nil && m.P70 != nil {
		return *m.P70
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetP65() float64 {
	if m != nil && m.P65 != nil {
		return *m.P65
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetP60() float64 {
	if m != nil && m.P60 != nil {
		return *m.P60
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetP55() float64 {
	if m != nil && m.P55 != nil {
		return *m.P55
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetP50() float64 {
	if m != nil && m.P50 != nil {
		return *m.P50
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetP45() float64 {
	if m != nil && m.P45 != nil {
		return *m.P45
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetP40() float64 {
	if m != nil && m.P40 != nil {
		return *m.P40
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetP35() float64 {
	if m != nil && m.P35 != nil {
		return *m.P35
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetP30() float64 {
	if m != nil && m.P30 != nil {
		return *m.P30
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetP25() float64 {
	if m != nil && m.P25 != nil {
		return *m.P25
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetP20() float64 {
	if m != nil && m.P20 != nil {
		return *m.P20
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetP15() float64 {
	if m != nil && m.P15 != nil {
		return *m.P15
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetP10() float64 {
	if m != nil && m.P10 != nil {
		return *m.P10
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetP5() float64 {
	if m != nil && m.P5 != nil {
		return *m.P5
	}
	return 0
}

func (m *Aggregation_AggregationDouble) GetP1() float64 {
	if m != nil && m.P1 != nil {
		return *m.P1
	}
	return 0
}

type Points struct {
	Type              *DataType `protobuf:"varint,1,opt,name=type,enum=tsviewdb.DataType,def=1" json:"type,omitempty"`
	DeltaValuesScaled []int64   `protobuf:"zigzag64,2,rep,packed,name=delta_values_scaled" json:"delta_values_scaled,omitempty"`
	ValuesDouble      []float64 `protobuf:"fixed64,3,rep,packed,name=values_double" json:"values_double,omitempty"`
	DeltaTimestamps   []int64   `protobuf:"varint,6,rep,packed,name=delta_timestamps" json:"delta_timestamps,omitempty"`
	XXX_unrecognized  []byte    `json:"-"`
}

func (m *Points) Reset()         { *m = Points{} }
func (m *Points) String() string { return proto.CompactTextString(m) }
func (*Points) ProtoMessage()    {}

const Default_Points_Type DataType = DataType_SCALED1

func (m *Points) GetType() DataType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_Points_Type
}

func (m *Points) GetDeltaValuesScaled() []int64 {
	if m != nil {
		return m.DeltaValuesScaled
	}
	return nil
}

func (m *Points) GetValuesDouble() []float64 {
	if m != nil {
		return m.ValuesDouble
	}
	return nil
}

func (m *Points) GetDeltaTimestamps() []int64 {
	if m != nil {
		return m.DeltaTimestamps
	}
	return nil
}

type SourceInfo struct {
	UnitsMap          []string `protobuf:"bytes,1,rep,name=units_map" json:"units_map,omitempty"`
	MetricNames       []string `protobuf:"bytes,2,rep,name=metric_names" json:"metric_names,omitempty"`
	UnitsIndices      []int32  `protobuf:"varint,3,rep,packed,name=units_indices" json:"units_indices,omitempty"`
	SelectForDefaults []bool   `protobuf:"varint,4,rep,name=select_for_defaults" json:"select_for_defaults,omitempty"`
	XXX_unrecognized  []byte   `json:"-"`
}

func (m *SourceInfo) Reset()         { *m = SourceInfo{} }
func (m *SourceInfo) String() string { return proto.CompactTextString(m) }
func (*SourceInfo) ProtoMessage()    {}

func (m *SourceInfo) GetUnitsMap() []string {
	if m != nil {
		return m.UnitsMap
	}
	return nil
}

func (m *SourceInfo) GetMetricNames() []string {
	if m != nil {
		return m.MetricNames
	}
	return nil
}

func (m *SourceInfo) GetUnitsIndices() []int32 {
	if m != nil {
		return m.UnitsIndices
	}
	return nil
}

func (m *SourceInfo) GetSelectForDefaults() []bool {
	if m != nil {
		return m.SelectForDefaults
	}
	return nil
}

type Expires struct {
	RowTtlInSecs     *int32 `protobuf:"varint,1,opt,name=row_ttl_in_secs" json:"row_ttl_in_secs,omitempty"`
	PointsTtlInSecs  *int32 `protobuf:"varint,2,opt,name=points_ttl_in_secs" json:"points_ttl_in_secs,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Expires) Reset()         { *m = Expires{} }
func (m *Expires) String() string { return proto.CompactTextString(m) }
func (*Expires) ProtoMessage()    {}

func (m *Expires) GetRowTtlInSecs() int32 {
	if m != nil && m.RowTtlInSecs != nil {
		return *m.RowTtlInSecs
	}
	return 0
}

func (m *Expires) GetPointsTtlInSecs() int32 {
	if m != nil && m.PointsTtlInSecs != nil {
		return *m.PointsTtlInSecs
	}
	return 0
}

type Config struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}

func (m *Config) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Config) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type Table struct {
	SrcNameMap       []string         `protobuf:"bytes,1,rep,name=src_name_map" json:"src_name_map,omitempty"`
	MetricNameMap    []string         `protobuf:"bytes,2,rep,name=metric_name_map" json:"metric_name_map,omitempty"`
	ConfigPairMap    []*Config        `protobuf:"bytes,3,rep,name=config_pair_map" json:"config_pair_map,omitempty"`
	ConfigGroupMap   []*Table_Configs `protobuf:"bytes,4,rep,name=config_group_map" json:"config_group_map,omitempty"`
	SrcIndices       []int32          `protobuf:"varint,5,rep,packed,name=src_indices" json:"src_indices,omitempty"`
	MetricIndices    []int32          `protobuf:"varint,6,rep,packed,name=metric_indices" json:"metric_indices,omitempty"`
	DeltaTimestamps  []int64          `protobuf:"zigzag64,7,rep,packed,name=delta_timestamps" json:"delta_timestamps,omitempty"`
	Rows             []*Table_Row     `protobuf:"bytes,8,rep,name=rows" json:"rows,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *Table) Reset()         { *m = Table{} }
func (m *Table) String() string { return proto.CompactTextString(m) }
func (*Table) ProtoMessage()    {}

func (m *Table) GetSrcNameMap() []string {
	if m != nil {
		return m.SrcNameMap
	}
	return nil
}

func (m *Table) GetMetricNameMap() []string {
	if m != nil {
		return m.MetricNameMap
	}
	return nil
}

func (m *Table) GetConfigPairMap() []*Config {
	if m != nil {
		return m.ConfigPairMap
	}
	return nil
}

func (m *Table) GetConfigGroupMap() []*Table_Configs {
	if m != nil {
		return m.ConfigGroupMap
	}
	return nil
}

func (m *Table) GetSrcIndices() []int32 {
	if m != nil {
		return m.SrcIndices
	}
	return nil
}

func (m *Table) GetMetricIndices() []int32 {
	if m != nil {
		return m.MetricIndices
	}
	return nil
}

func (m *Table) GetDeltaTimestamps() []int64 {
	if m != nil {
		return m.DeltaTimestamps
	}
	return nil
}

func (m *Table) GetRows() []*Table_Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

type Table_Configs struct {
	ConfigPairIndices []int32 `protobuf:"varint,1,rep,packed,name=config_pair_indices" json:"config_pair_indices,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *Table_Configs) Reset()         { *m = Table_Configs{} }
func (m *Table_Configs) String() string { return proto.CompactTextString(m) }
func (*Table_Configs) ProtoMessage()    {}

func (m *Table_Configs) GetConfigPairIndices() []int32 {
	if m != nil {
		return m.ConfigPairIndices
	}
	return nil
}

type Table_Row struct {
	IdMap              []string       `protobuf:"bytes,1,rep,name=id_map" json:"id_map,omitempty"`
	IdIndices          []int32        `protobuf:"varint,2,rep,packed,name=id_indices" json:"id_indices,omitempty"`
	Aggregations       []*Aggregation `protobuf:"bytes,3,rep,name=aggregations" json:"aggregations,omitempty"`
	Points             []*Points      `protobuf:"bytes,6,rep,name=points" json:"points,omitempty"`
	ConfigGroupIndices []int32        `protobuf:"varint,7,rep,packed,name=config_group_indices" json:"config_group_indices,omitempty"`
	XXX_unrecognized   []byte         `json:"-"`
}

func (m *Table_Row) Reset()         { *m = Table_Row{} }
func (m *Table_Row) String() string { return proto.CompactTextString(m) }
func (*Table_Row) ProtoMessage()    {}

func (m *Table_Row) GetIdMap() []string {
	if m != nil {
		return m.IdMap
	}
	return nil
}

func (m *Table_Row) GetIdIndices() []int32 {
	if m != nil {
		return m.IdIndices
	}
	return nil
}

func (m *Table_Row) GetAggregations() []*Aggregation {
	if m != nil {
		return m.Aggregations
	}
	return nil
}

func (m *Table_Row) GetPoints() []*Points {
	if m != nil {
		return m.Points
	}
	return nil
}

func (m *Table_Row) GetConfigGroupIndices() []int32 {
	if m != nil {
		return m.ConfigGroupIndices
	}
	return nil
}

type SingleSrcRow struct {
	SrcName          *string              `protobuf:"bytes,1,opt,name=src_name" json:"src_name,omitempty"`
	Timestamp        *int64               `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Id               *string              `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Row              []*SingleSrcRow_Cell `protobuf:"bytes,5,rep,name=row" json:"row,omitempty"`
	Configs          []*Config            `protobuf:"bytes,6,rep,name=configs" json:"configs,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *SingleSrcRow) Reset()         { *m = SingleSrcRow{} }
func (m *SingleSrcRow) String() string { return proto.CompactTextString(m) }
func (*SingleSrcRow) ProtoMessage()    {}

func (m *SingleSrcRow) GetSrcName() string {
	if m != nil && m.SrcName != nil {
		return *m.SrcName
	}
	return ""
}

func (m *SingleSrcRow) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *SingleSrcRow) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *SingleSrcRow) GetRow() []*SingleSrcRow_Cell {
	if m != nil {
		return m.Row
	}
	return nil
}

func (m *SingleSrcRow) GetConfigs() []*Config {
	if m != nil {
		return m.Configs
	}
	return nil
}

type SingleSrcRow_Cell struct {
	MetricName       *string      `protobuf:"bytes,1,opt,name=metric_name" json:"metric_name,omitempty"`
	Aggregations     *Aggregation `protobuf:"bytes,2,opt,name=aggregations" json:"aggregations,omitempty"`
	Points           *Points      `protobuf:"bytes,3,opt,name=points" json:"points,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SingleSrcRow_Cell) Reset()         { *m = SingleSrcRow_Cell{} }
func (m *SingleSrcRow_Cell) String() string { return proto.CompactTextString(m) }
func (*SingleSrcRow_Cell) ProtoMessage()    {}

func (m *SingleSrcRow_Cell) GetMetricName() string {
	if m != nil && m.MetricName != nil {
		return *m.MetricName
	}
	return ""
}

func (m *SingleSrcRow_Cell) GetAggregations() *Aggregation {
	if m != nil {
		return m.Aggregations
	}
	return nil
}

func (m *SingleSrcRow_Cell) GetPoints() *Points {
	if m != nil {
		return m.Points
	}
	return nil
}

func init() {
	proto.RegisterEnum("tsviewdb.DataType", DataType_name, DataType_value)
}
